% \VignetteIndexEntry{ Training models }
% \VignettePackage{HGTools}
%\VignetteEngine{knitr::knitr}

% To compile this document
% library('knitr'); rm(list=ls()); knit('Training.Rnw')

\documentclass[12pt]{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}

\newcommand{\pkg}[1]{{\fontseries{b}\selectfont #1}}
\renewcommand{\pkg}[1]{{\textsf{#1}}}

\newcommand{\Rpackage}[1]{\textsl{#1}}
\newcommand\CRANpkg[1]{%
  {\href{http://cran.fhcrc.org/web/packages/#1/index.html}%
    {\Rpackage{#1}}}}
\newcommand\Githubpkg[1]{\GithubSplit#1\relax}
\def\GithubSplit#1/#2\relax{{\href{https://github.com/#1/#2}%
    {\Rpackage{#2}}}}

\newcommand{\Rcode}[1]{\texttt{#1}}
\newcommand{\Rfunction}[1]{\Rcode{#1}}
\newcommand{\Robject}[1]{\Rcode{#1}}
\newcommand{\Rclass}[1]{\textit{#1}}

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(
concordance=TRUE
)
@

\title{Training Predictive Models}
\author{Dr. Charles Determan Jr. PhD\footnote{cdeterman@healthgrades.com}}
\newpage

\maketitle
\section{Introduction}
This vignette is designed to simply get a user 'up and running' with model
development.  The statistical justifications are not included here but are intended to
be included in a subsequent vignette.  If the user is curious, feel free to search
the extensive machine learning literature on the value of cross-validation.

\maketitle
\section{Installation}
This package is not an official R package and exists solely in the authors github repository.
There are some additional dependencies that must also be installed.

<<install, eval=FALSE>>=
# install devtools and bigmemory backends
install.packages(c("devtools","bigmemory", "bigalgebra", "biganalytics"))

# the other dependencies should be installed automatically
devtools::install_github("cdeterman/HGTools")
@

\newpage
\maketitle
\section{Grid Searching}
If you are completely unfamiliar with the model you wish to tune this package provides the 
function \Rfunction{denovo.grid}.  For most methods, this function only requires you to
specify the method and 'resolution' for the grid.  You can see all available models with the
\Rfunction{modelInfo} function.

<<gridSearch, eval = FALSE>>=
denovo.grid(method = "neuralnet", res = 3)
@

However, some methods require the dataset for estimating appropriate parameters.  This
includes random forest (denoted 'rf').

<<rfgrid, eval=FALSE>>=
# Note the dvs denotes the dependent variables to omit from the estimation
# This can be omitted but you will receive a warning
denovo.grid("neuralnet", res=5, data=trainingData, dvs=c("my_dv"))
@

If you know what you are doing, you can also create the grid manually using the \Rfunction{expand.grid}
function.  Please note that the hyperparameters you specify must match the desired model and
be prefixed with a 'period'

<<manualGrid, eval=FALSE>>=
expand.grid(.hidden = seq(2,5), .threshold = c(5, 1))
@

You can see the available parameters for each model by running \Rfunction{modelInfo}.

\maketitle
\section{Demo Data}
Now you are essentially ready to begin training your model.  You only need to have some data to work
with.  The following is an example using the adhd dataset included in this package for testing 
purposes.  You can load the training and testing datasets with the following commands:

<<loadData, eval=FALSE>>=
data("adhd_train")
data("adhd_test")
@

\newpage
\maketitle
\section{Model Training}
The function call below will fit a neuralnet model.  The primary arguments include:

\begin{itemize}
\item X - character vector of independent variable names
\item Y - character vector of dependent variable names
\item data - the dataset to be trained from
\item testData - the dataset used to evaluate the final model
\item k - the number of fold used in cross-validation (default: 10)
\item metric - performance metric to evaluate models (default: AUC)
\end{itemize}
             
<<trainExample, eval=FALSE>>=
# To save space I am indexing the names
cnames <- colnames(training)
ivs <- cnames[3:ncol(training)]
dvs <- cnames(training)[1]

f <- as.formula(paste(dvs, " ~ ", paste(ivs, collapse= "+")))

fit_nn <- train(formula = f,
                data = training,
                testData = testing,
                method = "neuralnet",
                grid = grid,
                k = 5,
                metric = "AUC"
)
@

\maketitle
\section{Results}
Once the \Rfunction{train} call has completed, you will be returned a list with contains the following elements:

\begin{enumerate}
\item finalModel - the final model generated from the 'best' hyperparameters, this is your production model from those evaluated
\item performance - the performance statistics for the final model against the test dataset
\item cvPerformanceMatrix - a list containing the means and variances of each hyperparameter iteration
\item bestParams - a data.frame containing the 'best' hyperparameters
\end{enumerate}

\maketitle
\section{Parallelization}
This task can clearly take advantage of parallelization.  To do so, you must set up the parallel backend in R.
To do so depends upon your operating system.  The cross-platform backed to use the package \Rpackage{doParallel}.
You simply need to pass the number of cores you wish to parallize over with \Rfunction{registerDoParallel}.

<<doParallel, eval=FALSE>>=
# register 8 cores
cl <- makeCluster(8)
registerDoParallel(8)

# make sure to stop cluster when completed
stopCluster(cl)
@

The linux specific version is \Rpackage{doMC} with the similar function \Rfunction{registerDoMC}.  You can
essentially use whatever backed you wish so long as it is compatible with your system.

Once the backend is setup you can call the \Rfunction{train} the same as before but change the 'allowParallel' argument
to TRUE.

<<trainParallel, eval=FALSE>>=
fit_nn <- train(formula = f,
                data = training,
                testData = testing,
                method = "neuralnet",
                grid = grid,
                k = 5,
                metric = "AUC",
                allowParallel = TRUE
)
@

\maketitle
\section{Saving All Models}
It may be the user's wish to save every model that is created during cross-validation.  
This option is also provided with the \Rfunction{train} function with the argument \Rcode{save\_models}.  
Simply set the \Rcode{save\_models} to TRUE and all models generated with be saved with the format 
'model\_hyperparam\_hyperparam\_iter\_cv\_model.rda' with varying numbers of hyperparameters for the 
specific model.

\end{document}
